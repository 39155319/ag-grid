{
    "filterParams": {
        "buttons": {
            "description": "Specifies the buttons to be shown in the filter, in the order they should be displayed in. The options are: <ul><li><code>'apply'</code>: If the Apply button is present, the filter is only applied after the user hits the Apply button.</li><li><code>'clear'</code>: The Clear button will clear the (form) details of the filter without removing any active filters on the column.</li><li><code>'reset'</code>: The Reset button will clear the details of the filter and any active filters on that column.</li><li><code>'cancel'</code>: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.</li></ul>"
        },
        "closeOnApply": {
            "description": "If the Apply button is present, the filter popup will be closed immediately when the Apply or Reset button is clicked if this is set to <code>true</code>."
        },
        "debounceMs": {
            "description": "By default the <a href='../javascript-grid-filter-text'>Text</a> and <a href='../javascript-grid-filter-number'>Number</a> filters will debounce by 500ms. This is because these filters have text field inputs, so time is given to the user to type items in. The <a href='../javascript-grid-filter-set/'>Set</a> and <a href='../javascript-grid-filter-date'>Date</a> will execute immediately (no debounce). To override these defaults, set <code>debounceMs</code> to the number of milliseconds to  debounce by."
        },
        "newRowsAction": {
            "default": "clear",
            "description": "This property is for when using the <a href='../javascript-grid-client-side-model/'>Client Side Row Model</a> only. When set to <code>'clear'</code>, updating the data in the grid by calling <code>api.setRowData()</code> (or updating the <code>rowData</code> property if bound by a framework) will clear (reset) the filter. If you instead set this to <code>'keep'</code>, the grid will keep its currently set filter when the data is updated."
        }
    },
    "api": {
        "getModelFromUi()": {
            "description": "Returns the filter model from the UI. If changes have been made to the UI but not yet applied, this model will reflect those changes."
        },
        "applyModel()": {
            "description": "Applies the model shown in the UI (so that <code>getModel()</code> will now return what was in the UI when <code>applyModel()</code> was called)."
        }
    }
}